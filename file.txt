// JAVASCRIPT: QUICKSORT

// Quicksort is an efficient sorting algorithm that is based on the divide and conquer strategy. 
// Like merge sort, the input array is partitioned into smaller parts and then combined after the elements have been rearranged. 
// Unlike merge sort, which requires additional memory for auxiliary arrays, quicksort is space-saving because it deploys in-place sorting.
// runtime performance: 
// quicksort requires more comparisons for sorting a larger input than mergesort. 
// Like bubble sort, quicksort has a worst case runtime of O(N^2). 
// This can happen when quicksortâ€™s input data set comprises of:
// pre-sorted numbers,
// backward-sorted numbers, or
// all similar elements along with a poorly chosen pivot element that produces a partition of zero or one element.
// On average, like merge sort, the runtime of quicksort is O(N * log N) if partition sizes are roughly equal.
// The basic idea of the quicksort algorithm is to:
// split the initial unsorted data set into a left partition and a right partition
// sort each partition recursively until there is only one element left
// return the sorted array
// Uses a pivot element to divide our unsorted array into two parts. The elements in these parts must meet these conditions after partitioning:
// all elements in the left partition must be less than or equal to the pivot element
// all elements in the right partition must be greater than or equal to the pivot element
// Determining the pivot index is done through a procedure called partitioning. 
// This algorithm uses an array to store the data set and stipulates the boundary of the data set with left and right pointers.